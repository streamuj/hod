#!/bin/bash

#   Copyright (C) 2013 Timo Kousa
#
#   This file is part of HLS On Demand.
#
#   HLS On Demand is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   HLS On Demand is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with HLS On Demand.  If not, see <http://www.gnu.org/licenses/>.

TEMP=$(getopt -n ${0} -o c:efhk:K:l:n:N:o:p:rsSt:u:U:w: -- "${@}")
if [ ${?} != 0 ]; then
	echo "Usage: ${0} [options] input"
	exit 1
fi

eval set -- "${TEMP}"

while true; do
	case "${1}" in
		-c)
			SEG_OPTS="${SEG_OPTS} -c ${2}"
			TIMESTAMP_FILE="${2}"
			shift 2 ;;
		-e)
			SEG_OPTS="${SEG_OPTS} -e"
			shift ;;
		-f)
			SEG_OPTS="${SEG_OPTS} -f"
			shift ;;
		-h)
			echo "A script to make ABR HLS (C) Timo Kousa"
			echo
			echo "Usage: ${0} [options] input"
			echo
			echo "Options:"
			echo " -c <file>     \"keepalive\" file"
			echo " -e            use time() as index in filenames"
			echo " -f            force overwrite of output files"
			echo " -k <keyfile>  keyfile for openssl aes encryption"
			echo " -K <url>      url for aes key in the playlist"
			echo " -l <lang>     preferred language for audio / subtitles"
			echo " -n <count>    keep <count> segments (0 keeps all)"
			echo " -N <int>      value to pass for nice -n"
			echo " -o <opts>     options for ffmpeg"
			echo " -p <prefix>   prefix for all files to be created"
			echo " -r            randomize every IV"
			echo " -s            use the system time instead of PTS"
			echo " -S            burn subtitles"
			echo " -t <sec>      target duration of a segment (default: 10)"
			echo " -u <url>      url prefix for playlists in the abr playlist"
			echo " -U <url>      url prefix for ts-files in the playlist"
			echo " -w <dir>      directory to store temporary files (default: .)"
			echo
			exit ;;
		-k)
			KEYFILE="${2}"
			shift 2 ;;
		-K)
			SEG_OPTS="${SEG_OPTS} -K ${2}"
			shift 2 ;;
		-l)
			LANG="${2}"
			shift 2 ;;
		-n)
			OPT_n="-n ${2}"
			shift 2 ;;
		-N)
			NICE="nice -n ${2}"
			shift 2 ;;
		-o)
			PASSED_OPTS="${2}"
			shift 2 ;;
		-p)
			PREFIX=$(basename ${2})
			DATADIR="$(dirname ${2})"
			shift 2 ;;
		-r)
			SEG_OPTS="${SEG_OPTS} -r"
			shift ;;
		-s)
			SEG_OPTS="${SEG_OPTS} -s"
			shift ;;
		-S)
			SUBTITLES="true"
			shift ;;
		-t)
			SEG_OPTS="${SEG_OPTS} -t ${2}"
			shift 2 ;;
		-u)
			URL_PREFIX="${2}"
			shift 2 ;;
		-U)
			SEG_OPTS="${SEG_OPTS} -U ${2}"
			shift 2 ;;
		-w)
			WORKDIR="${2}"
			shift 2 ;;
		--)
			shift
			break ;;
	esac
done

INPUT=${1}

if [ -z "${INPUT}" ]; then
	echo "Input is required."
	exit 1
fi

if [ -z "${PREFIX}" ]; then
	echo "Prefix for the files needs to be set (-p)"
	exit 1
fi

declare -A BW SIZE CODEC FFOPT

if [ -s /etc/hod.conf ]; then
	source /etc/hod.conf
else
	FILTER="yadif"

	BW_AUDIO="64000"
	CODEC_AUDIO="mp4a.40.2"
	FFOPT_AUDIO="-c:a libfaac -b:a ${BW_AUDIO} -ac 2"

	BW[cell]="400000"
	SIZE[cell]="480x270"
	CODEC[cell]="avc1.42001e"
	FFOPT[cell]="-c:v libx264 -preset ultrafast -profile:v baseline -level 3.0 -s ${SIZE[cell]} -b:v ${BW[cell]} -minrate ${BW[cell]} -maxrate ${BW[cell]} -bufsize $((BW[cell] / 2)) -r 12.5 -x264opts keyint=40"

	BW[wifi]="1200000"
	SIZE[wifi]="640x360"
	CODEC[wifi]="avc1.42001f"
	FFOPT[wifi]="-c:v libx264 -preset ultrafast -profile:v baseline -level 3.1 -s ${SIZE[wifi]} -b:v ${BW[wifi]} -minrate ${BW[wifi]} -maxrate ${BW[wifi]} -bufsize $((BW[wifi] / 2)) -r 25 -x264opts keyint=80"
fi

test -z "${WORKDIR}" && WORKDIR='.'
test -d ${WORKDIR} || mkdir -p ${WORKDIR}

test -s "${WORKDIR}/${PREFIX}.streams" || timeout -s 9 60 ffprobe -loglevel fatal -show_streams "${INPUT}" > "${WORKDIR}/${PREFIX}.streams"

while read line; do
	if [[ "${line}" == "[STREAM]" ]]; then
		unset index;
		unset codec_type;
		unset codec_name;
		unset width;
		unset height;
		unset language;
		continue;
	fi

	[[ "${line}" == "index="* ]] && index="${line##index=}"
	[[ "${line}" == "codec_type="* ]] && codec_type="${line##codec_type=}"
	[[ "${line}" == "codec_name="* ]] && codec_name="${line##codec_name=}"
	[[ "${line}" == "width="* ]] && width="${line##width=}"
	[[ "${line}" == "height="* ]] && height="${line##height=}"
	[[ "${line}" == "TAG:language="* ]] && language="${line##TAG:language=}"

	if [[ "${line}" == "[/STREAM]" ]]; then
		if [[ "${codec_type}" == "video" ]] && test -z "${video_index}"; then
			video_index="${index}"
			video_w="${width}"
			video_h="${height}"
		fi

		if [[ "${codec_type}" == "audio" ]]; then
			test -z "${audio_index}" && audio_index="${index}"
			test -n "${LANG}" && [[ "${language}" == "${LANG}" ]] && audio_index="${index}"
		fi

		if test -n "${SUBTITLES}" && [[ "${codec_name}" == "dvbsub" || ( -z "${sub_index}" && "${codec_name}" == "libzvbi_teletextdec" ) ]]; then
			if [ -n "${LANG}" ]; then
				[[ "${language}" == *"${LANG}"* ]] && sub_index="${index}"
			else
				test -z "${sub_index}" && sub_index="${index}"
			fi
		fi
	fi
done < "${WORKDIR}/${PREFIX}.streams"

if [ -n "${video_index}" ]; then
	if [ -n "${sub_index}" ]; then
		if [ -n "${FILTER}" ]; then
			MAP_VIDEO="-filter_complex [0:${video_index}]${FILTER}[video];[0:${sub_index}]scale=${video_w}:${video_h}[sub];[video][sub]overlay[out] -map [out]"
		else
			MAP_VIDEO="-filter_complex [0:${sub_index}]scale=${video_w}:${video_h}[sub];[0:${video_index}][sub]overlay[out] -map [out]"
		fi
	else
		if [ -n "${FILTER}" ]; then
			MAP_VIDEO="-filter:v ${FILTER} -map 0:${video_index}"
		else
			MAP_VIDEO="-map 0:${video_index}"
		fi
	fi
else
	unset FFOPT
fi

if [ -n "${audio_index}" ]; then
	MAP_AUDIO="-map 0:${audio_index}"
else
	unset FFOPT_AUDIO
	BW_AUDIO="0"
	SEG_OPTS="${SEG_OPTS} -a"
fi

for i in "${!FFOPT[@]}"; do
	FIFOS="${FIFOS} ${WORKDIR}/${PREFIX}.${i}.fifo"
done

test -n "${FFOPT_AUDIO}" && FIFOS="${FIFOS} ${WORKDIR}/${PREFIX}.audio.fifo"

if [ -z "${FIFOS}" ]; then
	rm -f "${WORKDIR}/${PREFIX}.streams"
	test -n "${TIMESTAMP_FILE}" && rm -f "${TIMESTAMP_FILE}"
	exit
fi

mkfifo ${FIFOS} || exit

if [ -n "${KEYFILE}" ]; then
	SEG_OPTS="${SEG_OPTS} -k ${KEYFILE}"
	test -s "${KEYFILE}" || openssl rand 16 > "${KEYFILE}"
fi

test -n "${DATADIR}" -a ! -d ${DATADIR} && mkdir -p ${DATADIR}

FFMPEG_OPTS="-i ${INPUT}"

echo "#EXTM3U" > "${DATADIR}/${PREFIX}.m3u8.part"

SORTED=$(for i in "${!FFOPT[@]}"; do echo "${BW[${i}]} ${i}"; done | sort -gr | sed -e 's/^[^ ]* //')

for i in ${SORTED}; do
	CODECS=${CODEC[${i}]}
	FFMPEG_OPTS="${FFMPEG_OPTS} ${MAP_VIDEO} ${FFOPT[${i}]}"

	if [ -n "${FFOPT_AUDIO}" ]; then
		CODECS="${CODECS}, ${CODEC_AUDIO}"
		FFMPEG_OPTS="${FFMPEG_OPTS} ${MAP_AUDIO} ${FFOPT_AUDIO}"
	fi

	FFMPEG_OPTS="${FFMPEG_OPTS} -f mpegts -y ${WORKDIR}/${PREFIX}.${i}.fifo"

	echo "#EXT-X-STREAM-INF:PROGRAM-ID=1, BANDWIDTH=$(((BW[${i}] + BW_AUDIO) * 110 / 100)), CODECS=\"${CODECS}\", RESOLUTION=${SIZE[${i}]}" >> "${DATADIR}/${PREFIX}.m3u8.part"
	echo "${URL_PREFIX}${PREFIX}.${i}.m3u8" >> "${DATADIR}/${PREFIX}.m3u8.part"

	segmenter ${SEG_OPTS} ${OPT_n} -p "${DATADIR}/${PREFIX}.${i}.m3u8" "${DATADIR}/${PREFIX}.${i}.%u.ts" < "${WORKDIR}/${PREFIX}.${i}.fifo" &
done

if [ -n "${FFOPT_AUDIO}" ]; then
	echo "#EXT-X-STREAM-INF:PROGRAM-ID=1, BANDWIDTH=$((BW_AUDIO * 110 / 100)), CODECS=\"${CODEC_AUDIO}\"" >> "${DATADIR}/${PREFIX}.m3u8.part"
	echo "${URL_PREFIX}${PREFIX}.audio.m3u8" >> "${DATADIR}/${PREFIX}.m3u8.part"

	FFMPEG_OPTS="${FFMPEG_OPTS} -vn ${MAP_AUDIO} ${FFOPT_AUDIO} -f mpegts -y ${WORKDIR}/${PREFIX}.audio.fifo"

	segmenter ${SEG_OPTS} ${OPT_n} -p "${DATADIR}/${PREFIX}.audio.m3u8" "${DATADIR}/${PREFIX}.audio.%u.ts" < "${WORKDIR}/${PREFIX}.audio.fifo" &
fi

mv -f "${DATADIR}/${PREFIX}.m3u8.part" "${DATADIR}/${PREFIX}.m3u8"

${NICE} ffmpeg ${PASSED_OPTS} ${FFMPEG_OPTS} || touch ${FIFOS}

sleep 1

rm -f ${FIFOS}

test -n "${TIMESTAMP_FILE}" && rm -f "${TIMESTAMP_FILE}"

if [ -n "${OPT_n}" ]; then
	rm -f "${DATADIR}/${PREFIX}".m3u8 "${WORKDIR}/${PREFIX}.streams"
	test -n "${KEYFILE}" && rm -f ${KEYFILE}
	for i in "${!FFOPT[@]}"; do
		rm -f "${DATADIR}/${PREFIX}.${i}".*
	done
	test -n "${FFOPT_AUDIO}" && rm -f "${DATADIR}/${PREFIX}".audio.*
	rmdir ${DATADIR}
fi
